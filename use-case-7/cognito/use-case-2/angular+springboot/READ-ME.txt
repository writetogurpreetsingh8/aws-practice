Project Overview:

This demo consists of two separate applications:

1) Frontend: Built with Angular
2) Backend: Built with Spring Boot

Key Features:

A) Implements Sign In, Sign Up, and Token Refresh functionality.
B) Uses OAuth 2.0 with PKCE flow, with AWS Cognito as the Identity Provider.
C) All authentication logic (Sign In, Sign Up, redirection handling) is managed by the backend.
D) Upon successful login, the frontend receives id_token, access_token, and refresh_token. It includes the access_token as a Bearer token in the Authorization header for subsequent API calls.
E) The backend is configured as an oauth2ResourceServer, which automatically extracts and validates the Bearer token to authenticate the user.
F) If the access_token expires, the backend responds with a 401 Unauthorized error. The frontend intercepts this, triggers a refresh by calling the /oauth2/token endpoint, obtains a new access_token and retries the original request.


In order to logout we also need to invoke either /revoke endpoint of cognito or 
use Cognito SDK GlobalSignoutReqeuest or AdminGlobalSignoutReqeuest


if user itself logout than we should use SDK GlobalSignoutReqeuest or if there is Admin intervention to make 
user forcefully logout than we should use AdminGlobalSignoutReqeuest only
if we use GlobalSignoutReqeuest we must use this scope("aws.cognito.signin.user.admin") while asking tokens from Cognito
and we also need to set this scope in the Cognito UI console Under "OpenID Connect scopes" section 

For further details, refer to the project code & flow image.
